#!/usr/bin/env python3
"""
üß™ TESTE DA NOVA CONVERSA√á√ÉO PROFISSIONAL
Simula conversas para validar o novo sistema antes do deploy
"""

import requests
import json
import time
from datetime import datetime

BACKEND_URL = "https://agente-qualificador-ldc.onrender.com"

def criar_payload_teste(from_number, message, nome="Eduardo"):
    """Cria payload de teste para webhook"""
    return {
        "event": "message",
        "payload": {
            "id": f"test_{int(time.time())}_{hash(message) % 1000}",
            "from": f"{from_number}@c.us",
            "fromName": nome,
            "body": message,
            "fromMe": False,
            "timestamp": int(datetime.now().timestamp() * 1000)
        }
    }

def enviar_mensagem_teste(payload):
    """Envia mensagem de teste para o webhook"""
    try:
        response = requests.post(
            f"{BACKEND_URL}/webhook",
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            resposta = data.get('result', {}).get('resposta_enviada', 'Sem resposta')
            print(f"‚úÖ Resposta: {resposta}")
            return True
        else:
            print(f"‚ùå Erro: HTTP {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def testar_conversa_completa():
    """Testa uma conversa completa do in√≠cio ao agendamento"""
    
    print("üß™ TESTANDO NOVA CONVERSA√á√ÉO PROFISSIONAL")
    print("=" * 60)
    
    # N√∫mero de teste
    numero_teste = "5511999999999"
    
    # Cen√°rio 1: Conversa ideal
    print("\nüìû CEN√ÅRIO 1: Lead interessado e qualificado")
    print("-" * 40)
    
    conversas_teste = [
        {
            "mensagem": "ola",
            "descricao": "Primeira mensagem"
        },
        {
            "mensagem": "sim",
            "descricao": "Aceita conversar"
        },
        {
            "mensagem": "j√° invisto um pouco",
            "descricao": "Situa√ß√£o atual"
        },
        {
            "mensagem": "tenho uma reserva boa formada",
            "descricao": "Patrim√¥nio"
        },
        {
            "mensagem": "quero fazer crescer mais r√°pido",
            "descricao": "Objetivo"
        },
        {
            "mensagem": "sim, me interessaria",
            "descricao": "Interesse no diagn√≥stico"
        },
        {
            "mensagem": "amanh√£ √†s 10h",
            "descricao": "Agendamento"
        }
    ]
    
    for i, teste in enumerate(conversas_teste, 1):
        print(f"\n{i}. {teste['descricao']}")
        print(f"   Lead: {teste['mensagem']}")
        
        payload = criar_payload_teste(numero_teste, teste['mensagem'], "Eduardo")
        
        if enviar_mensagem_teste(payload):
            print("   ‚úÖ Processado com sucesso")
        else:
            print("   ‚ùå Falhou")
            break
            
        time.sleep(2)  # Pausa entre mensagens
    
    print("\n" + "=" * 60)
    print("üèÅ TESTE CONCLU√çDO!")
    
    # Verificar hist√≥rico
    print("\nüìã Verificando hist√≥rico...")
    try:
        response = requests.get(f"{BACKEND_URL}/leads?limit=1")
        if response.status_code == 200:
            data = response.json()
            leads = data.get('leads', [])
            if leads:
                lead = leads[0]
                print(f"‚úÖ Lead encontrado: {lead.get('nome')} - Status: {lead.get('status')}")
                print(f"   Telefone: {lead.get('telefone')}")
                print(f"   √öltimo contato: {lead.get('ultimo_contato', 'N/A')}")
            else:
                print("‚ùå Nenhum lead encontrado")
        else:
            print(f"‚ùå Erro ao buscar leads: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao verificar hist√≥rico: {e}")

def testar_cenarios_especificos():
    """Testa cen√°rios espec√≠ficos de obje√ß√µes"""
    
    print("\nüé≠ TESTANDO CEN√ÅRIOS DE OBJE√á√ïES")
    print("-" * 40)
    
    cenarios_objecoes = [
        {
            "setup": ["ola", "sim", "estou come√ßando"],
            "objecao": "n√£o tenho muito dinheiro",
            "descricao": "Obje√ß√£o: pouco dinheiro"
        },
        {
            "setup": ["ola", "sim", "j√° invisto"],
            "objecao": "j√° tenho um assessor",
            "descricao": "Obje√ß√£o: j√° tem assessor"
        },
        {
            "setup": ["ola", "sim", "tenho uma reserva"],
            "objecao": "n√£o tenho tempo agora",
            "descricao": "Obje√ß√£o: sem tempo"
        }
    ]
    
    for i, cenario in enumerate(cenarios_objecoes, 1):
        print(f"\n{i}. {cenario['descricao']}")
        numero = f"551199999999{i}"  # N√∫mero diferente para cada cen√°rio
        
        # Setup inicial
        for msg in cenario['setup']:
            payload = criar_payload_teste(numero, msg, f"Lead{i}")
            enviar_mensagem_teste(payload)
            time.sleep(1)
        
        # Obje√ß√£o
        print(f"   Obje√ß√£o: {cenario['objecao']}")
        payload = criar_payload_teste(numero, cenario['objecao'], f"Lead{i}")
        enviar_mensagem_teste(payload)
        
        time.sleep(2)

def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DA NOVA CONVERSA√á√ÉO")
    
    # Verificar se backend est√° funcionando
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Backend funcionando")
        else:
            print("‚ùå Backend com problemas")
            return
    except Exception as e:
        print(f"‚ùå Backend inacess√≠vel: {e}")
        return
    
    # Executar testes
    testar_conversa_completa()
    testar_cenarios_especificos()
    
    print("\nüéØ RESUMO DOS TESTES:")
    print("1. ‚úÖ Teste de conversa completa")
    print("2. ‚úÖ Teste de obje√ß√µes")
    print("3. üìä Verifica√ß√£o de hist√≥rico")
    
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("1. Analisar qualidade das respostas")
    print("2. Ajustar prompts se necess√°rio")
    print("3. Fazer deploy das melhorias")

if __name__ == "__main__":
    main()
